# -*- coding: utf-8 -*-
"""Classification of Benign and malicious apps.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OJQJK1M9--5KwxqC5o7oxbjBIKhoH1rW
"""

from google.colab import drive
import pathlib
drive.mount('/content/drive',force_remount=True)

import os
import shutil
import pandas as pd
from sklearn.preprocessing import MultiLabelBinarizer
import xml.etree.ElementTree as ET
import sklearn.svm
import sklearn.cluster
import sklearn.linear_model
import sklearn.model_selection
import sklearn.tree
import lightgbm
import sklearn.metrics
import xgboost
from sklearn.decomposition import PCA
import matplotlib.pyplot
import numpy as np
import sklearn.ensemble

seed = 17

def parseAndDecompileApks(filePath,chdirectory):
    apkTool = "C:/Users/jnoronha/apktool.jar"
    for fileName in os.listdir(filePath):
        curFilePath = os.path.join(filePath, fileName)
        os.chdir(chdirectory)
        if curFilePath.endswith('.apk'):
            os.system("java -jar " + apkTool + " d " + curFilePath)


def parseAndGetAndroidManifest(directoryPath, outputPath):
    for directory in os.listdir(directoryPath):
        if directory == '.DS_Store':
            continue
        inputFilePath = '/'+directory+'/AndroidManifest.xml'
        outputFileName = '/'+directory+'_AndroidManifest.xml'
        if(os.path.exists(directoryPath+inputFilePath)):
          shutil.copyfile(directoryPath+inputFilePath, outputPath+outputFileName)

"""# Function to calculate the F1-Score, TP, FP, FN, and TN"""

def calculatefscore(expected,actual):
  TP=0
  FP=0
  FN=0
  TN=0
  for i in range(len(expected)):
    if actual[i]>=1 and expected[i]==1:
      TP=TP+1
    elif actual[i]==1 and expected[i]==0:
      FP=FP+1
    elif actual[i]==0 and expected[i]==1:
      FN=FN+1
    else:
      TN=TN+1
    

  fscore=2*TP/(2*TP+FP+FN)
  print("TP: "+ str(TP))
  print("FP: "+ str(FP))
  print("FN: "+ str(FN))
  print("TN: "+ str(TN))

"""# Data Prepaparation

permissionsMapFeat -  Has only permissions as a feature

permissionsMapFeat1 - Has permission, receiver as features

permissionsMapFeat2 - Has permission, receiver and activity as features
"""
#change based on the apk and xml location
parseAndDecompileApks('C:/Users/jnoronha/Documents/siftwaresecurity/malware','C:/Users/jnoronha/Documents/siftwaresecurity/extractedmalware')
parseAndDecompileApks('C:/Users/jnoronha/Documents/siftwaresecurity/benign','C:/Users/jnoronha/Documents/siftwaresecurity/extractedbenign')
parseAndGetAndroidManifest('C:/Users/jnoronha/Documents/siftwaresecurity/extractedmalware', 'C:/Users/jnoronha/Documents/siftwaresecurity/extractedmanifestmalign')
parseAndGetAndroidManifest('C:/Users/jnoronha/Documents/siftwaresecurity/extractedbenign', 'C:/Users/jnoronha/Documents/siftwaresecurity/extractedmanifestbenign')

malPermissionsMapFeat = pd.DataFrame(columns=['AppName','Permissions','isBenign'])
malPermissionsMapFeat1 = pd.DataFrame(columns=['AppName','Permissions','Receiver','isBenign'])
malPermissionsMapFeat2 = pd.DataFrame(columns=['AppName','Permissions','Receiver','Activity','isBenign'])


mal_dir = "/content/drive/MyDrive/extractedmanifestmalign"
for fileName in os.listdir(mal_dir):
  if fileName == '.DS_Store':
    continue
  try:
    androidManifest = ET.parse(mal_dir+'/'+fileName)
  except ET.ParseError:
    continue
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  receiverList= []
  activityList=[]
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  for receiver in androidManifest.findall('application/receiver'):
    receiverList.append(receiver.attrib['{http://schemas.android.com/apk/res/android}name'])
  for activity in androidManifest.findall('application/activity'):
    activityList.append(activity.attrib['{http://schemas.android.com/apk/res/android}name'])
  malPermissionsMapFeat.loc[len(malPermissionsMapFeat.index)] = [appName,permissionsList,0]
  malPermissionsMapFeat1.loc[len(malPermissionsMapFeat1.index)] = [appName,permissionsList,receiverList,0]
  malPermissionsMapFeat2.loc[len(malPermissionsMapFeat2.index)] = [appName,permissionsList,receiverList,activityList,0]

benPermissionsMapFeat = pd.DataFrame(columns=['AppName','Permissions','isBenign'])
benPermissionsMapFeat1 = pd.DataFrame(columns=['AppName','Permissions','Receiver','isBenign'])
benPermissionsMapFeat2 = pd.DataFrame(columns=['AppName','Permissions','Receiver','Activity','isBenign'])

ben_dir = "/content/drive/My Drive/extractedmanifestbenign"
for fileName in os.listdir(ben_dir):
  if fileName == '.DS_Store':
    continue
  try:
    androidManifest = ET.parse(ben_dir+'/'+fileName)
  except ET.ParseError:
    continue
  appName = fileName[:len(fileName)-20]
  permissionsList = []
  receiverList= []
  activityList=[]
  for permission in androidManifest.findall('uses-permission'):
    permissionsList.append(permission.attrib['{http://schemas.android.com/apk/res/android}name'])
  for receiver in androidManifest.findall('application/receiver'):
    receiverList.append(receiver.attrib['{http://schemas.android.com/apk/res/android}name'])
  for activity in androidManifest.findall('application/activity'):
    activityList.append(activity.attrib['{http://schemas.android.com/apk/res/android}name'])
  benPermissionsMapFeat.loc[len(benPermissionsMapFeat.index)] = [appName,permissionsList,1]
  benPermissionsMapFeat1.loc[len(benPermissionsMapFeat1.index)] = [appName,permissionsList,receiverList,1]
  benPermissionsMapFeat2.loc[len(benPermissionsMapFeat2.index)] = [appName,permissionsList,receiverList,activityList,1]

permissionsMapFeat=pd.concat([benPermissionsMapFeat,malPermissionsMapFeat],ignore_index=True)
permissionsMapFeat1=pd.concat([benPermissionsMapFeat1,malPermissionsMapFeat1],ignore_index=True)
permissionsMapFeat2=pd.concat([benPermissionsMapFeat2,malPermissionsMapFeat2],ignore_index=True)


multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
permissionsMapFeat = permissionsMapFeat.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat.pop('Permissions')),index=permissionsMapFeat.index,columns=multiLableBinarizer.classes_))
permissionsMapFeat = permissionsMapFeat.drop('AppName', axis=1)
isBenFeat=permissionsMapFeat.isBenign
permissionsMapFeat = permissionsMapFeat.drop('isBenign', axis=1)
permissionsMapFeat=permissionsMapFeat.to_numpy()
isBenFeat=isBenFeat.to_numpy()

multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
permissionsMapFeat1 = permissionsMapFeat1.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat1.pop('Permissions')),index=permissionsMapFeat1.index,columns=multiLableBinarizer.classes_))
permissionsMapFeat1 = permissionsMapFeat1.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat1.pop('Receiver')),index=permissionsMapFeat1.index,columns=multiLableBinarizer.classes_))
permissionsMapFeat1 = permissionsMapFeat1.drop('AppName', axis=1)
isBenFeat1=permissionsMapFeat1.isBenign
permissionsMapFeat1 = permissionsMapFeat1.drop('isBenign', axis=1)
permissionsMapFeat1=permissionsMapFeat1.to_numpy()
isBenFeat1=isBenFeat1.to_numpy()
print(permissionsMapFeat2)
multiLableBinarizer = MultiLabelBinarizer(sparse_output=True)
permissionsMapFeat2 = permissionsMapFeat2.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat2.pop('Permissions')),index=permissionsMapFeat2.index,columns=multiLableBinarizer.classes_))
permissionsMapFeat2 = permissionsMapFeat2.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat2.pop('Receiver')),index=permissionsMapFeat2.index,columns=multiLableBinarizer.classes_))
permissionsMapFeat2 = permissionsMapFeat2.join(pd.DataFrame.sparse.from_spmatrix(multiLableBinarizer.fit_transform(permissionsMapFeat2.pop('Activity')),index=permissionsMapFeat2.index,columns=multiLableBinarizer.classes_))
print(permissionsMapFeat2)
permissionsMapFeat2 = permissionsMapFeat2.drop('AppName', axis=1)
isBenFeat2=permissionsMapFeat2.isBenign
permissionsMapFeat2 = permissionsMapFeat2.drop('isBenign', axis=1)
permissionsMapFeat2=permissionsMapFeat2.to_numpy()
isBenFeat2=isBenFeat2.to_numpy()

"""# Feature Extraction using PCA
Train test split - 80% Training 20% Testing

trainSet,testSet,trainRes,testRes - train test split of permissionMapFeat

trainSet1,testSet1,trainRes1,testRes1 - train test split of permissionMapFeat1

trainSet2,testSet2,trainRes2,testRes2 - train test split of permissionMapFeat2
"""

trainSet,testSet,trainRes,testRes = sklearn.model_selection.train_test_split(permissionsMapFeat,isBenFeat, test_size=0.2, random_state=17)
trainSet1,testSet1,trainRes1,testRes1 = sklearn.model_selection.train_test_split(permissionsMapFeat1,isBenFeat1, test_size=0.2, random_state=17)
trainSet2,testSet2,trainRes2,testRes2 = sklearn.model_selection.train_test_split(permissionsMapFeat2,isBenFeat2, test_size=0.2, random_state=17)
n_components = 10

pca = PCA(n_components=n_components).fit(trainSet)
pca1 = PCA(n_components=n_components).fit(trainSet1)
pca2 = PCA(n_components=n_components).fit(trainSet2)

matplotlib.pyplot.plot(np.cumsum(pca.explained_variance_ratio_))
np.cumsum(pca.explained_variance_ratio_)
matplotlib.pyplot.xlabel('num principal components')
matplotlib.pyplot.ylabel('Fraction of total variance explained')

matplotlib.pyplot.plot(np.cumsum(pca1.explained_variance_ratio_))
np.cumsum(pca1.explained_variance_ratio_)
matplotlib.pyplot.xlabel('num principal components')
matplotlib.pyplot.ylabel('Fraction of total variance explained')

matplotlib.pyplot.plot(np.cumsum(pca2.explained_variance_ratio_))
np.cumsum(pca2.explained_variance_ratio_)
matplotlib.pyplot.xlabel('num principal components')
matplotlib.pyplot.ylabel('Fraction of total variance explained')

n_components = 3

pca = PCA(n_components=n_components).fit(trainSet)
pca1 = PCA(n_components=n_components).fit(trainSet1)
pca2 = PCA(n_components=n_components).fit(trainSet2)

X_train_pca = pca.transform(trainSet)
X_test_pca = pca.transform(testSet)

X_train_pca1 = pca1.transform(trainSet1)
X_test_pca1 = pca1.transform(testSet1)

X_train_pca2 = pca2.transform(trainSet2)
X_test_pca2 = pca2.transform(testSet2)

fig, ax = matplotlib.pyplot.subplots(1)

for i in range(2):
    ax.scatter(X_train_pca[trainRes==i][:,0], X_train_pca[trainRes==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

fig, ax = matplotlib.pyplot.subplots(1)

for i in range(2):
    ax.scatter(X_train_pca1[trainRes1==i][:,0], X_train_pca1[trainRes1==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

fig, ax = matplotlib.pyplot.subplots(1)

for i in range(2):
    ax.scatter(X_train_pca2[trainRes2==i][:,0], X_train_pca2[trainRes2==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

trainRes = trainRes.astype('int')
trainRes1 = trainRes1.astype('int')
trainRes2 = trainRes2.astype('int')

"""# SVM's for all three dataframes

**Cross Validation for SVM**
"""

from sklearn.model_selection import cross_val_score
from sklearn.svm import SVC
svc = SVC(C=10000, kernel='rbf')
scores = cross_val_score(svc, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
svc1 = SVC(C=10000, kernel='rbf')
scores1 = cross_val_score(svc1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
svc2 = SVC(C=10000, kernel='rbf')
scores2 = cross_val_score(svc2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

svc.fit(X_train_pca, trainRes)
svc1 = SVC(C=10000, kernel='rbf')
svc1.fit(X_train_pca1, trainRes1)
svc2 = SVC(C=10000, kernel='rbf')
svc2.fit(X_train_pca2, trainRes2)

y_pred = svc.predict(X_test_pca)
y_pred1 = svc1.predict(X_test_pca1)
y_pred2 = svc2.predict(X_test_pca2)

testRes = testRes.astype('int')
testRes1 = testRes1.astype('int')
testRes2 = testRes2.astype('int')

from sklearn.metrics import classification_report

print(classification_report(testRes, y_pred))

print("SVM")
fscore=calculatefscore(testRes,y_pred)

print(classification_report(testRes1, y_pred1))

print("SVM PCA Feature-2")
fscore=calculatefscore(testRes1,y_pred1)

print(classification_report(testRes2, y_pred2))

print("SVM PCA Feature-3")
fscore=calculatefscore(testRes2,y_pred2)

"""# LightGBM Classifier"""

lgbmClassifier=lightgbm.LGBMClassifier()
scores = cross_val_score(lgbmClassifier, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
lgbmClassifier1=lightgbm.LGBMClassifier()
scores1 = cross_val_score(lgbmClassifier1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
lgbmClassifier2=lightgbm.LGBMClassifier()
scores2 = cross_val_score(lgbmClassifier2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

lgbmClassifier=lightgbm.LGBMClassifier()
lgbmClassifier.fit(X_train_pca, trainRes)
predLGBM = lgbmClassifier.predict(X_test_pca)

lgbmClassifier1=lightgbm.LGBMClassifier()
lgbmClassifier1.fit(X_train_pca1, trainRes1)
predLGBM1 = lgbmClassifier1.predict(X_test_pca1)

lgbmClassifier2=lightgbm.LGBMClassifier()
lgbmClassifier2.fit(X_train_pca2, trainRes2)
predLGBM2 = lgbmClassifier2.predict(X_test_pca2)

print(classification_report(testRes, predLGBM))

print("LGBM")
fscore=calculatefscore(testRes,predLGBM)

print(classification_report(testRes1, predLGBM1))

print("LGBM PCA Feature-2")
fscore=calculatefscore(testRes1,predLGBM1)

print(classification_report(testRes2, predLGBM2))

print("LGBM PCA Feature-3")
fscore=calculatefscore(testRes2,predLGBM2)

"""# Decision tree Classifier"""

decisionTreeClassifier=sklearn.tree.DecisionTreeClassifier()
scores = cross_val_score(decisionTreeClassifier, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
decisionTreeClassifier1=sklearn.tree.DecisionTreeClassifier()
scores1 = cross_val_score(decisionTreeClassifier1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
decisionTreeClassifier2=sklearn.tree.DecisionTreeClassifier()
scores2 = cross_val_score(decisionTreeClassifier2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

decisionTreeClassifier=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier.fit(X_train_pca, trainRes)
predDTC = decisionTreeClassifier.predict(X_test_pca)
print(classification_report(testRes, predDTC))

print("Decision Tree PCA Feature-1")
fscore=calculatefscore(testRes,predDTC)

decisionTreeClassifier1=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier1.fit(X_train_pca1, trainRes1)
predDTC1 = decisionTreeClassifier1.predict(X_test_pca1)
print(classification_report(testRes1, predDTC1))

print("Decision Tree PCA Feature-2")
fscore=calculatefscore(testRes1,predDTC1)

decisionTreeClassifier2=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier2.fit(X_train_pca2, trainRes2)
predDTC2 = decisionTreeClassifier2.predict(X_test_pca2)
print(classification_report(testRes2, predDTC2))

print("Decision Tree PCA Feature-3")
fscore=calculatefscore(testRes2,predDTC2)

"""# XGBoost Classifier"""

xgBoostClassfier = xgboost.XGBClassifier()
scores = cross_val_score(xgBoostClassfier, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
xgBoostClassfier1 = xgboost.XGBClassifier()
scores1 = cross_val_score(xgBoostClassfier1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
xgBoostClassfier2 = xgboost.XGBClassifier()
scores2 = cross_val_score(xgBoostClassfier2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

xgBoostClassfier = xgboost.XGBClassifier()
xgBoostClassfier.fit(X_train_pca, trainRes)
predictionsXGBoost = xgBoostClassfier.predict(X_test_pca)
print(classification_report(testRes, predictionsXGBoost))

print("XGBoost Classifier")
fscore=calculatefscore(testRes,predictionsXGBoost)

xgBoostClassfier1 = xgboost.XGBClassifier()
xgBoostClassfier1.fit(X_train_pca1, trainRes1)
predictionsXGBoost1 = xgBoostClassfier1.predict(X_test_pca1)
print(classification_report(testRes1, predictionsXGBoost1))

print("XGBoost Classifier PCA Feature-2")
fscore=calculatefscore(testRes1,predictionsXGBoost1)

xgBoostClassfier2 = xgboost.XGBClassifier()
xgBoostClassfier2.fit(X_train_pca2, trainRes2)
predictionsXGBoost2 = xgBoostClassfier2.predict(X_test_pca2)
print(classification_report(testRes2, predictionsXGBoost2))

print("XGBoost Classifier PCA Feature-3")
fscore=calculatefscore(testRes2,predictionsXGBoost2)

"""# Random Forest Classifier"""

randomForestClassifier = sklearn.ensemble.RandomForestClassifier()
scores = cross_val_score(xgBoostClassfier, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
randomForestClassifier1 = sklearn.ensemble.RandomForestClassifier()
scores1 = cross_val_score(xgBoostClassfier1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
randomForestClassifier2 = sklearn.ensemble.RandomForestClassifier()
scores2 = cross_val_score(xgBoostClassfier2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

randomForestClassifier = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier.fit(X_train_pca, trainRes)
predictionsRandomForest = randomForestClassifier.predict(X_test_pca)
print(classification_report(testRes, predictionsRandomForest))

print("Random Forest")
fscore=calculatefscore(testRes,predictionsRandomForest)

randomForestClassifier1 = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier1.fit(X_train_pca1, trainRes1)
predictionsRandomForest1 = randomForestClassifier1.predict(X_test_pca1)
print(classification_report(testRes1, predictionsRandomForest1))

print("Random Forest PCA Feature-2")
fscore=calculatefscore(testRes1,predictionsRandomForest1)

randomForestClassifier2 = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier2.fit(X_train_pca2, trainRes2)
predictionsRandomForest2 = randomForestClassifier2.predict(X_test_pca2)
print(classification_report(testRes2, predictionsRandomForest2))

print("Random Forest PCA Feature-3")
fscore=calculatefscore(testRes2,predictionsRandomForest2)

"""# Kernel PCA for Feature Extraction"""

from sklearn.decomposition import KernelPCA

n_components = 10

kpca = KernelPCA(n_components=n_components, kernel='rbf', fit_inverse_transform=True).fit(trainSet)
kpca1 = KernelPCA(n_components=n_components, kernel='rbf', fit_inverse_transform=True).fit(trainSet1)
kpca2 = KernelPCA(n_components=n_components, kernel='rbf', fit_inverse_transform=True).fit(trainSet2)

X_train_kpca = kpca.transform(trainSet)
X_test_kpca = kpca.transform(testSet)
X_train_kpca1 = kpca1.transform(trainSet1)
X_test_kpca1 = kpca1.transform(testSet1)
X_train_kpca2 = kpca2.transform(trainSet2)
X_test_kpca2 = kpca2.transform(testSet2)

fig, ax = matplotlib.pyplot.subplots(1)

for i in range(2):
    ax.scatter(X_train_kpca[trainRes==i][:,0], X_train_kpca[trainRes==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

fig, ax = matplotlib.pyplot.subplots(1)
for i in range(2):
    ax.scatter(X_train_kpca1[trainRes1==i][:,0], X_train_kpca1[trainRes1==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

fig, ax = matplotlib.pyplot.subplots(1)

for i in range(2):
    ax.scatter(X_train_kpca2[trainRes2==i][:,0], X_train_kpca2[trainRes2==i][:,1], label=[0, 1][i], alpha=0.5)
    
ax.set_xlabel('PC 1')
ax.set_xlabel('PC 2')
ax.legend()

"""# SVM Classifier with Kernel PCA"""

svc = SVC(C=10000, kernel='rbf')
scores = cross_val_score(svc, X=X_train_kpca, y=trainRes, cv=5, n_jobs=1)
svc1 = SVC(C=10000, kernel='rbf')
scores1 = cross_val_score(svc1, X=X_train_kpca1, y=trainRes1, cv=5, n_jobs=1)
svc2 = SVC(C=10000, kernel='rbf')
scores2 = cross_val_score(svc2, X=X_train_kpca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

svc = SVC(C=10000, kernel='rbf')
svc.fit(X_train_kpca, trainRes)
y_pred_svm = svc.predict(X_test_kpca)
print(classification_report(testRes, y_pred_svm))

print("SVM")
fscore=calculatefscore(testRes,y_pred_svm)

svc1 = SVC(C=10000, kernel='rbf')
svc1.fit(X_train_kpca1, trainRes1)
y_pred_svm1 = svc1.predict(X_test_kpca1)
print(classification_report(testRes1, y_pred_svm1))

print("SVM Kernel PCA Feature-2")
fscore=calculatefscore(testRes1,y_pred_svm1)

svc2 = SVC(C=10000, kernel='rbf')
svc2.fit(X_train_kpca2, trainRes2)
y_pred_svm2 = svc2.predict(X_test_kpca2)
print(classification_report(testRes2, y_pred_svm2))

print("SVM Kernel PCA Feature-3")
fscore=calculatefscore(testRes2,y_pred_svm2)

"""# LightGBM Classifier with Kernel PCA"""

lgbmClassifier=lightgbm.LGBMClassifier()
scores = cross_val_score(lgbmClassifier, X=X_train_kpca, y=trainRes, cv=5, n_jobs=1)
lgbmClassifier1=lightgbm.LGBMClassifier()
scores1 = cross_val_score(lgbmClassifier1, X=X_train_kpca1, y=trainRes1, cv=5, n_jobs=1)
lgbmClassifier2=lightgbm.LGBMClassifier()
scores2 = cross_val_score(lgbmClassifier2, X=X_train_kpca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

lgbmClassifier=lightgbm.LGBMClassifier()
lgbmClassifier.fit(X_train_kpca, trainRes)
predLGBMKpca = lgbmClassifier.predict(X_test_kpca)
print(classification_report(testRes, predLGBMKpca))

print('LGBM')
fscore=calculatefscore(testRes,predLGBMKpca)

lgbmClassifier1=lightgbm.LGBMClassifier()
lgbmClassifier1.fit(X_train_kpca1, trainRes1)
predLGBMKpca1 = lgbmClassifier1.predict(X_test_kpca1)
print(classification_report(testRes1, predLGBMKpca1))

print('LGBM Kernel PCA Feature-2')
fscore=calculatefscore(testRes1,predLGBMKpca1)

lgbmClassifier2=lightgbm.LGBMClassifier()
lgbmClassifier2.fit(X_train_kpca2, trainRes2)
predLGBMKpca2 = lgbmClassifier2.predict(X_test_kpca2)
print(classification_report(testRes2, predLGBMKpca2))

print('LGBM Kernel PCA Feature-3')
fscore=calculatefscore(testRes2,predLGBMKpca2)

"""# Decision Tree Classifier with Kernel PCA"""

decisionTreeClassifier=sklearn.tree.DecisionTreeClassifier()
scores = cross_val_score(decisionTreeClassifier, X=X_train_kpca, y=trainRes, cv=5, n_jobs=1)
decisionTreeClassifier1=sklearn.tree.DecisionTreeClassifier()
scores1 = cross_val_score(decisionTreeClassifier1, X=X_train_kpca1, y=trainRes1, cv=5, n_jobs=1)
decisionTreeClassifier2=sklearn.tree.DecisionTreeClassifier()
scores2 = cross_val_score(decisionTreeClassifier2, X=X_train_kpca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

decisionTreeClassifier=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier.fit(X_train_kpca, trainRes)
predDTCKpca = decisionTreeClassifier.predict(X_test_kpca)
print(classification_report(testRes, predDTCKpca))

print('Decision Tree Classifier')
fscore=calculatefscore(testRes,predDTCKpca)

decisionTreeClassifier1=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier1.fit(X_train_kpca1, trainRes1)
predDTCKpca1 = decisionTreeClassifier1.predict(X_test_kpca1)
print(classification_report(testRes1, predDTCKpca1))

print('Decision Tree Classifier Kernel PCA Feature-2')
fscore=calculatefscore(testRes1,predDTCKpca1)

decisionTreeClassifier2=sklearn.tree.DecisionTreeClassifier()
decisionTreeClassifier2.fit(X_train_kpca2, trainRes2)
predDTCKpca2 = decisionTreeClassifier2.predict(X_test_kpca2)
print(classification_report(testRes2, predDTCKpca2))

print('Decision Tree Classifier Kernel PCA Feature-3')
fscore=calculatefscore(testRes2,predDTCKpca2)

"""# XGBoost Classifier with Kernel PCA"""

xgBoostClassfier = xgboost.XGBClassifier()
scores = cross_val_score(xgBoostClassfier, X=X_train_kpca, y=trainRes, cv=5, n_jobs=1)
xgBoostClassfier1 = xgboost.XGBClassifier()
scores1 = cross_val_score(xgBoostClassfier1, X=X_train_kpca1, y=trainRes1, cv=5, n_jobs=1)
xgBoostClassfier2 = xgboost.XGBClassifier()
scores2 = cross_val_score(xgBoostClassfier2, X=X_train_kpca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

xgBoostClassfier = xgboost.XGBClassifier()
xgBoostClassfier.fit(X_train_kpca, trainRes)
predictionsXGBoostKpca = xgBoostClassfier.predict(X_test_kpca)
print(classification_report(testRes, predictionsXGBoostKpca))

print('XGBoost')
fscore=calculatefscore(testRes,predictionsXGBoostKpca)

xgBoostClassfier1 = xgboost.XGBClassifier()
xgBoostClassfier1.fit(X_train_kpca1, trainRes1)
predictionsXGBoostKpca1 = xgBoostClassfier1.predict(X_test_kpca1)
print(classification_report(testRes1, predictionsXGBoostKpca1))

print('XGBoost Kernel PCA Feature-2')
fscore=calculatefscore(testRes1,predictionsXGBoostKpca1)

xgBoostClassfier2 = xgboost.XGBClassifier()
xgBoostClassfier2.fit(X_train_kpca2, trainRes2)
predictionsXGBoostKpca2 = xgBoostClassfier2.predict(X_test_kpca2)
print(classification_report(testRes2, predictionsXGBoostKpca2))

print('XGBoost Kernel PCA Feature-3')
fscore=calculatefscore(testRes2,predictionsXGBoostKpca2)

"""# Random Forest Classifier with Kernel PCA"""

randomForestClassifier = sklearn.ensemble.RandomForestClassifier()
scores = cross_val_score(xgBoostClassfier, X=X_train_pca, y=trainRes, cv=5, n_jobs=1)
randomForestClassifier1 = sklearn.ensemble.RandomForestClassifier()
scores1 = cross_val_score(xgBoostClassfier1, X=X_train_pca1, y=trainRes1, cv=5, n_jobs=1)
randomForestClassifier2 = sklearn.ensemble.RandomForestClassifier()
scores2 = cross_val_score(xgBoostClassfier2, X=X_train_pca2, y=trainRes2, cv=5, n_jobs=1)

print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores),np.std(scores)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores1),np.std(scores1)))
print('Cross Validation accuracy: %.3f +/- %.3f' % (np.mean(scores2),np.std(scores2)))

randomForestClassifier = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier.fit(X_train_kpca, trainRes)
predictionsRandomForestKpca = randomForestClassifier.predict(X_test_kpca)
print(classification_report(testRes, predictionsRandomForestKpca))

print('Random Forest')
fscore=calculatefscore(testRes,predictionsRandomForestKpca)

randomForestClassifier1 = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier1.fit(X_train_kpca1, trainRes1)
predictionsRandomForestKpca1 = randomForestClassifier1.predict(X_test_kpca1)
print(classification_report(testRes1, predictionsRandomForestKpca1))

print('Random Forest Kernel PCA Feature-2')
fscore=calculatefscore(testRes1,predictionsRandomForestKpca1)

randomForestClassifier2 = sklearn.ensemble.RandomForestClassifier()
randomForestClassifier2.fit(X_train_kpca2, trainRes2)
predictionsRandomForestKpca2 = randomForestClassifier2.predict(X_test_kpca2)
print(classification_report(testRes2, predictionsRandomForestKpca2))

print('Random Forest Kernel PCA Feature-3')
fscore=calculatefscore(testRes2,predictionsRandomForestKpca2)